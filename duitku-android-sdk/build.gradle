

apply plugin: 'com.android.library'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'


group 'com.duitku'
version '1.0.4-beta-1'

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''


tasks.withType(Javadoc).all { enabled = false }

apply plugin: 'signing'
apply plugin: 'maven'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.4-beta-1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'com.jakewharton:butterknife:10.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    implementation 'com.google.android.material:material:1.0.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}





File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}



task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source
}



artifacts {
    archives androidSourcesJar
}


publishing {
    publications {
        release(MavenPublication) {
            groupId 'com.duitku'
            artifactId 'duitku-android-sdk'
            version '1.0.4-beta-1'
            artifact("$buildDir/outputs/aar/duitku-android-sdk-debug.aar") // replace with your library name
            artifact androidSourcesJar

            pom {
                name = 'com.duitku'
                description = 'android SDK for integration with duitku'
                url = 'https://github.com/duitkupg/duitku-android-sdk'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'duitku'
                        name = 'Bambang Maulana'
                        email = 'bambang@chakratechnology.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com:duitkupg/duitku-android-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com:duitkupg/duitku-android-sdk.git'
                    url = 'https://github.com/duitkupg/duitku-android-sdk'
                }


                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }





            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }


        }
    }
}



ext {
    PUBLISH_GROUP_ID = 'com.duitku'
    PUBLISH_ARTIFACT_ID = 'duitku-android-sdk'
    PUBLISH_VERSION = android.defaultConfig.versionName
}

signing {
    sign publishing.publications
}

nexusStaging {
    packageGroup = 'com.duitku'
    stagingProfileId = 'bcea62bcea28e7' // dummy example, replace with your own!
    username = ossrhUsername
    password = ossrhPassword
}
